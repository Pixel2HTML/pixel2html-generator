{
  "name": "Pixel2HTML/pixel2html-generator",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "Test",
  "branch": "",
  "style": {
    "name": "Brutalist",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/BasicHeader",
      "article": "article/MarkdownArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "Consolas, \"Liberation Mono\", Menlo, Courier, monospace",
    "heading": {},
    "typeScale": [
      48,
      32,
      20,
      18,
      16,
      14,
      12
    ],
    "layout": {
      "maxWidth": 1024,
      "fluid": true
    },
    "colors": {
      "text": "#333",
      "background": "#fff",
      "primary": "#666",
      "secondary": "#888",
      "highlight": "#1f80ff",
      "muted": "#f6f6f6",
      "border": "#eee"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "http://pixel2html.com",
          "text": "Home"
        },
        {
          "href": "https://github.com/Pixel2HTML/pixel2html-generator",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/generator-pixel2html",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "pixel2html-generator",
      "subhead": "We aim to generate a boilerplate code for projects when we know the specs. ðŸŽ‰",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "pixel2html-generator: We aim to generate a boilerplate code for projects when we know the specs. ðŸŽ‰",
          "url": "http://pixel2html.com"
        },
        {
          "component": "ui/GithubButton",
          "user": "Pixel2HTML",
          "repo": "pixel2html-generator"
        }
      ],
      "text": "v1.3.0"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "<h1>Pixel2HTML Boilerplate Generator 1.3.0</h1>\n<p><a href=\"https://travis-ci.org/Pixel2HTML/pixel2html-generator\"><img src=\"https://travis-ci.org/Pixel2HTML/pixel2html-generator.svg?branch=master\"></a></p>\n<p>We aim to generate a boilerplate code for projects when we know the specs. &#x1F495;</p>\n<h2>How to install</h2>\n<h4>Node</h4>\n<p>You will need <code>node</code> installed in your machine. In case you don&apos;t have it (you can check this typing <code>node --version</code> in your terminal) please visit <a href=\"https://nodejs.org/en/download/\">this link</a>.</p>\n<p>We also need to install <strong>Yeoman</strong>, and the <strong>Pixel2HTML Generator</strong>, so run this command in your terminal. The <code>-g</code> parameter is to install them globally so can use it in every project.</p>\n<pre>$ npm install -g yo generator-pixel2html</pre><h4>Ruby</h4>\n<p>If you plan is generate a site with <strong>Jekyll</strong> you also need <code>Ruby</code> and <code>Bundler</code> up &amp; running.</p>\n<p>You can check if <strong>Ruby</strong> is installed running <code>ruby --version</code>\nWe recommend to use the latest stable version (2.3.2). If you need more information please check on <a href=\"http://rubylang.com\">ruby official site</a> or <a href=\"rvm.io\">rvm</a> to handle multiple versions of Ruby.</p>\n<p>Also, for <strong>Bundler</strong>, run <code>gem install bundler</code> when <code>Ruby</code> is already installed and running.</p>\n<h2>Running the generator</h2>\n<h3>Option 1: Answer questions</h3>\n<p>To generate the <strong>Pixel2HTML Boilerplate</strong> go to your project folder and run this command in your shell</p>\n<pre><span class=\"hljs-symbol\">$</span> cd ~/your/project/folder\n<span class=\"hljs-symbol\">$</span> yo pixel2html</pre><p>The <strong>Pixel2HTML Boilerplate</strong> will ask you questions about this points. Answering with the desired options will generate the code.</p>\n<ul>\n<li>Client ID?</li>\n<li>Project ID?</li>\n<li>Quantity of screens?</li>\n<li>Markup Language? <em>Options: HTML/Pug</em></li>\n<li>Markup Integration? <em>Options: None/Jekyll</em></li>\n<li>CSS Processor? <em>Options: SCSS/LESS/Stylus</em></li>\n<li>Frontend Framework <em>Options: None/Bootstrap/Foundation/BassCss</em></li>\n<li>jQuery? <em>Options: true/false</em></li>\n</ul>\n<h3>Option 2: Using available parameters</h3>\n<p>You also can answer this questions passing parameters to the generator command.</p>\n<ul>\n<li><code>--clientId</code> (<em>int</em>)</li>\n<li><code>--projectId</code> (<em>int</em>)</li>\n<li><code>--qtyScreens</code> (<em>int</em>)</li>\n<li><code>--markupLanguage</code> (<em>string</em>) [html, pug]</li>\n<li><code>--markupIntegration</code> (<em>string</em>) [jekyll, none]</li>\n<li><code>--cssProcessor</code> (<em>string</em>) [scss, less, styl]</li>\n<li><code>--frontEndFramework</code> (<em>string</em>) [basscss, bootstrap, foundation, none]</li>\n<li><code>--jQuery</code> (<em>bool</em>)</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"hljs-comment\">$</span> <span class=\"hljs-comment\">yo</span> <span class=\"hljs-comment\">pixel2html</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">clientId=1234</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">markupLanguage=&apos;html&apos;</span></pre><h3>Option 3: Using the config file</h3>\n<p>You can create a <code>.json</code> file in the root directory of your project.\nHere an example of it&apos;s structure:</p>\n<pre>{\n  <span class=\"hljs-attr\">&quot;clientId&quot;</span>: XXX,\n  <span class=\"hljs-attr\">&quot;projectId&quot;</span>: XXX,\n  <span class=\"hljs-attr\">&quot;qtyScreens&quot;</span>: <span class=\"hljs-number\">4</span>,\n  <span class=\"hljs-attr\">&quot;markupLanguage&quot;</span>: &apos;html&apos;,\n  <span class=\"hljs-attr\">&quot;markupIntegration&quot;</span>: &apos;jekyll&apos;,\n  <span class=\"hljs-attr\">&quot;cssProcessor&quot;</span>: <span class=\"hljs-string\">&quot;less&quot;</span>,\n  <span class=\"hljs-attr\">&quot;frontEndFramework&quot;</span>: <span class=\"hljs-string\">&quot;bootstrap&quot;</span>,\n  <span class=\"hljs-attr\">&quot;jQuery&quot;</span>: <span class=\"hljs-literal\">true</span>\n}</pre><p>Once you created this file, run</p>\n<pre><span class=\"hljs-variable\">$ </span>yo pixel2html</pre><h2>Installing dependencies &amp; running up</h2>\n<p>To work, the <strong>Pixel2HTML Boilerplate</strong> needs to install some dependencies to run the options you select.\nFor this job, run this command in your shell</p>\n<pre>$ npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> start</span></pre><h2>File Structure</h2>\n<p>This boilerplate will create a set of files and folders</p>\n<pre>\n&#x251C;&#x2500;&#x2500;  dist/\n&#x251C;&#x2500;&#x2500;  gulp/\n&#x251C;&#x2500;&#x2500;  src/\n&#x2502;    &#x2514;&#x2500;&#x2500;  assets/\n&#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500;  fonts/\n&#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500;  icons/\n&#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500;  images/\n&#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500;  js/\n&#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500;  styles/\n&#x2502;    &#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500;  components/\n&#x2502;    &#x2502;    &#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500;  <span class=\"hljs-variable\">_buttons</span>.ext\n&#x2502;    &#x2502;    &#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500;  <span class=\"hljs-variable\">_footer</span>.ext\n&#x2502;    &#x2502;    &#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500;  <span class=\"hljs-variable\">_header</span>.ext\n&#x2502;    &#x2502;    &#x2502;    &#x2502;    &#x2514;&#x2500;&#x2500; <span class=\"hljs-variable\">_nav</span>.ext\n&#x2502;    &#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500;  screens/\n&#x2502;    &#x2502;    &#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500;  <span class=\"hljs-variable\">_base</span>.ext\n&#x2502;    &#x2502;    &#x2502;    &#x2502;    &#x2514;&#x2500;&#x2500;  screen_*.ext\n&#x2502;    &#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500; main.ext\n&#x2502;    &#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500; vendor.scss\n&#x2502;    &#x2502;    &#x2502;    &#x251C;&#x2500;&#x2500; mixins.ext\n&#x2502;    &#x2502;    &#x2502;    &#x2514;&#x2500;&#x2500; variables.ext\n&#x2502;    &#x2514;&#x2500;&#x2500;  screen_*.[html|pug]\n&#x251C;&#x2500;&#x2500;  .editorcofig\n&#x251C;&#x2500;&#x2500;  .gitattributes\n&#x251C;&#x2500;&#x2500;  .gitignore\n&#x251C;&#x2500;&#x2500;  .project.conf\n&#x251C;&#x2500;&#x2500;  gulpfile.js\n&#x251C;&#x2500;&#x2500;  package.json\n&#x2514;&#x2500;&#x2500;  README.md</pre><h2>Available script commands.</h2>\n<h3>Start to code.</h3>\n<ul>\n<li><code>$ npm run code</code></li>\n</ul>\n<h3>Build the project</h3>\n<ul>\n<li><code>$ npm run build</code></li>\n</ul>\n<h2>Available Gulp Commands</h2>\n<h3>Helpers</h3>\n<ul>\n<li><code>$ gulp clean</code> Clean /dist directory</li>\n</ul>\n<h3>Static Files</h3>\n<ul>\n<li><code>$ gulp main:static</code> Compile static files (images, icons)</li>\n<li><code>$ gulp main:images</code> Move images</li>\n<li><code>$ gulp main::icons</code> Move icons</li>\n</ul>\n<h3>Fonts Files</h3>\n<ul>\n<li><code>$ gulp main:fonts</code> Move project fonts</li>\n<li><code>$ gulp vendor:fonts</code> Move vendors fonts</li>\n</ul>\n<h3>Scripts</h3>\n<ul>\n<li><code>$ gulp main:scripts</code> Concat, uglify and move project JS files</li>\n<li><code>$ gulp vendor:scripts</code> Concat, uglify and move vendors JS files</li>\n</ul>\n<h3>Styles</h3>\n<ul>\n<li><code>$ gulp main:styles</code> Compile, concat, autoprefix, minify and move [SCSS, Less, Stylus] project files</li>\n<li><code>$ gulp vendor:styles</code> Compile, concat, autoprefix, minify and move [SCSS, Less, Stylus] vendor files</li>\n</ul>\n<h3>Integration</h3>\n<ul>\n<li><code>$ gulp jekyll:build</code> Compile markup with Jekyll&apos;s partials and layouts files.</li>\n</ul>\n<h3>Daemons</h3>\n<ul>\n<li><code>$ gulp watch</code> <strong>Watch</strong> your files and autoexecute gulp directives</li>\n<li><code>$ gulp serve</code> <strong>Watch</strong> your files and <strong>serve</strong> with an HTTP server and <strong>Sync</strong> with your prefered browser <em>awesome!</em></li>\n</ul>\n<h3>Delivery</h3>\n<ul>\n<li><code>$ gulp build</code> Execute all the gulp directives and makes a <code>.zip</code> file with the latest code.</li>\n</ul>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/Pixel2HTML/pixel2html-generator",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/Pixel2HTML",
          "text": "Pixel2HTML"
        }
      ]
    }
  ]
}